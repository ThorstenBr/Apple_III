;----------------------------------------------------------------------
;
;    "Horse Demo"
;           by Andy Hertzfeld    09/04/80
;
;    Disassembled by Rob Justice 03/20/20
;           https://github.com/robjustice/Apple3/tree/master/horses
;
;    Ported as stand-alone SOS application
;           by Thorsten Brehm    08/17/23
;
;----------------------------------------------------------------------
;
           .PROC SOSHORSES
           .SEGMENT "RAM"

;       The syntax for a SOS call using the macro below is
;       SOS     call_num, parameter_list pointer
        .MACRO  SOS CALL,PARAM  ; Macro def for SOS call block
        BRK                     ; Begin SOS call block
        .BYTE   CALL            ; call_num
        .WORD   PARAM           ; parameter_list pointer
        .ENDMACRO               ; end of macro definition

; APPLE3 KEYBOARD REGISTERS
KBD_DATA    = $C000
KBDSTRB     = $C010

; APPLE3 SYSTEM REGISTERS
ENVREG      = $FFDF ; Environment Register (bits: 0:ROMEN,1:ROM1,2:PRSTK,3:WPROT,4:RSTEN,5:SCRN,6:IOEN,7:1MHz)
BANKREG     = $FFEF ; Bank selection register for $2000-$9FFF (lower 4 bits)
CHRRAM_DISABLE= $C04E ; character RAM disable
CHRRAM_ENABLE = $C04F ; character RAM enable

;
;       SOS call_nums:
;
;Device
DCONTROL      = $83
DGET_DEV_NUM  = $84

;File
VOLUME        = $C5
SET_PREFIX    = $C6
GET_PREFIX    = $C7
OPEN          = $C8
READ          = $CA             ; call_num for READ
WRITE         = $CB             ; call_num for WRITE
CLOSE         = $CC
SET_MARK      = $CE
GET_EOF       = $D1

;
; Interpreter Header
;
CODE_AREA        = $7000
CODESTART        = CODE_AREA
          .ORG     CODESTART-$0E; Leave 14 bytes for header

          .BYTE    "SOS NTRP"   ; 8 bytes, fixed label for SOS.INTERP
          .WORD    $0000        ; 2 bytes, opt_header_length = 0 (if >0, then additional data follows this element)
          .WORD    CODESTART    ; 2 bytes, loading_address
          .WORD    CODELEN      ; 2 bytes, code_length, size of program without header
                                ; Interpreters are always ABSOLUTE code, starting at a fixed location.
           JMP     BEGIN        ; Jump to beginning of code

BEGIN:     JSR     OPENCONS    ; open console
           BNE     ABORT
           JSR     INITVIDEO   ; enable 40column color text mode
           BNE     ABORT
           JSR     HINIT
           BNE     ABORT

           LDA     ENVREG      ; get environment
	   STA     ENVTEMP     ; save environment
           ORA     #$40        ; enable IO access
           STA     ENVREG

           STA     KBDSTRB     ; clear keypress

           LDX     #$00        ; frame number
HORSELOOP: TXA
           CMP     #$05        ; 5 frames only (0-4)
           BNE     :+
           LDA     #$00
:          PHA
           JSR     HFRAME
           CMP     #$00        ; error=0?
           BEQ     :+
           TAX
           PLA
           TXA
           JMP     ABORT
:          JSR     HSCROLL
           PLA
           TAX
           INX

           ; dirty direct keyboard access
           ; we won't see the $80 "new keypress" flag, since it's eaten
           ; by the SOS keyboard interrupt handler
           LDA     ENVREG
           ORA     #$40        ; enable IO access
           STA     ENVREG
           LDA     KBD_DATA    ; key pressed?
           CMP     #27         ; ESC?
           BNE     HORSELOOP   ; hop hop hop...

:          LDA     #$00

ABORT:     STA     KBDSTRB     ; clear keypress

EXIT:      ; restore environment
	   LDA     ENVTEMP
           STA     ENVREG
	   
           ; SOS TERMINATE call
           SOS     $65,BYEPARM
BYEPARM:   .BYTE   0        ; must be 0

ENVTEMP:   .BYTE   0

;*****************************************************************
;
;        SUBROUTINES
;
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;
;        OPENCONS:  open the .CONSOLE file for reading
;
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

COLIST:    .BYTE   $04             ; 4 required parameters for OPEN
           .WORD   DEVNAME         ;   pathname pointer
CREF:      .BYTE   $00             ;   ref_num returned here
           .WORD   COPLIST         ;   option_list pointer
           .BYTE   $01             ;   length of opt parm list

COPLIST:   .BYTE   $03             ; Open for reading and writing
DEVNAME:   .BYTE   $08
           .BYTE   ".CONSOLE"

OPENCONS:                          ; Here we didn't use a macro.
           SOS OPEN,COLIST         ; Begin SOS call block.
           LDX     CREF            ; Save the result ref_num
           STX     WREF            ;   for READs and WRITEs.
           CMP     #$00
           RTS

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;
;        InitVideo:  set video mode and cursor settings
;
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
INITVIDEO:
           LDA     #16             ; Text Mode
           STA     BUFFER
           LDA     #$01            ; 1=40x24, 2=80x24
           STA     BUFFER+1
           INC     WCNT            ; send two bytes 
           SOS     WRITE, WPLIST   ; Write out 2 byte
           CMP     #$00
           RTS
;
; CONSOLE in/out buffer
;
BUFFER:  .BYTE   $00, $00        ; data buffer
WPLIST:  .BYTE   $03             ; 3 parameters for WRITE
WREF:    .BYTE   $00             ;   ref_num (from OPEN call)
         .WORD   BUFFER          ;   data_buffer pointer
WCNT:    .WORD   $0001           ;   request_count

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;
;        HINIT:  Load text screen with the character codes for the
;                horses and load the foreground/background colors.
;
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
           .PROC   HINIT

           ; First get the device number of the console
           SOS DGET_DEV_NUM,DEVBLOCK
           CMP     #$00
           BNE     RETURN
           LDA     CDEVNUM
           STA     WDEVNUM       ;Update the device number for later

           LDY     #$00
LOOP:      LDA     SCRNDAT1,Y
           STA     $0400,Y
           LDA     SCRNDAT2,Y
           STA     $0500,Y
           LDA     SCRNDAT3,Y
           STA     $0600,Y
           LDA     SCRNDAT4,Y
           STA     $0700,Y
           LDA     SCRNDAT5,Y
           STA     $0800,Y
           LDA     SCRNDAT6,Y
           STA     $0900,Y
           LDA     SCRNDAT7,Y
           STA     $0A00,Y
           LDA     SCRNDAT8,Y
           STA     $0B00,Y
           INY
           BNE     LOOP
RETURN:    LDA     #$00
           RTS

; 
; Text screen data
; first 32 character codes are used for the horses 
; MSB bit is set for inverse?
;
; 8 chars x 4 lines per horse
; eg
; $80,$81,$82,$83,$84,$85,$86,$87   ;Line2
; $88,$89,$8A,$8B,$8C,$8D,$8E,$8F   ;Line3
; $90,$91,$92,$93,$94,$95,$96,$97   ;Line4
; $98,$99,$9A,$9B,$9C,$9D,$9E,$9F   ;Line5
;
SCRNDAT1:  .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line1
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F   ;Line9
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F   ;Line17
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87   ;Line2
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97   ;Line10
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0   ;Line18
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00

SCRNDAT2:  .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F   ;Line3
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F   ;Line11
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line19
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97   ;Line4
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0   ;Line12
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87   ;Line20
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00

SCRNDAT3:  .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F   ;Line5
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line13
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F   ;Line21
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0   ;Line6
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87   ;Line14
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97   ;Line22
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00

SCRNDAT4:  .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line7
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F   ;Line15
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $88,$89,$8A,$8B,$8C,$8D,$8E,$8F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F   ;Line23
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $98,$99,$9A,$9B,$9C,$9D,$9E,$9F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87   ;Line8
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $80,$81,$82,$83,$84,$85,$86,$87
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97   ;Line16
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $90,$91,$92,$93,$94,$95,$96,$97
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0   ;Line24
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
; 
; Text foreground/background color data
; 
SCRNDAT5:  .BYTE   $EE,$EE,$EE,$EE,$EE,$EE,$EE,$EE   ;Line1
           .BYTE   $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
           .BYTE   $CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC
           .BYTE   $BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB
           .BYTE   $EE,$EE,$EE,$EE,$EE,$EE,$EE,$EE
           .BYTE   $40,$40,$40,$40,$40,$40,$40,$40   ;Line9
           .BYTE   $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
           .BYTE   $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $6A,$6A,$6A,$6A,$6A,$6A,$6A,$6A
           .BYTE   $D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5
           .BYTE   $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4   ;Line17
           .BYTE   $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $38,$38,$38,$38,$38,$38,$38,$38
           .BYTE   $14,$14,$14,$14,$14,$14,$14,$14
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $E1,$E1,$E1,$E1,$E1,$E1,$E1,$E1   ;Line2
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3
           .BYTE   $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
           .BYTE   $E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2
           .BYTE   $40,$40,$40,$40,$40,$40,$40,$40   ;Line10
           .BYTE   $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
           .BYTE   $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $6A,$6A,$6A,$6A,$6A,$6A,$6A,$6A
           .BYTE   $D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line18
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
                                                  
SCRNDAT6:  .BYTE   $E1,$E1,$E1,$E1,$E1,$E1,$E1,$E1   ;Line3
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3
           .BYTE   $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
           .BYTE   $E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2
           .BYTE   $40,$40,$40,$40,$40,$40,$40,$40   ;Line11
           .BYTE   $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
           .BYTE   $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $6A,$6A,$6A,$6A,$6A,$6A,$6A,$6A
           .BYTE   $D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5
           .BYTE   $99,$99,$99,$99,$99,$99,$99,$99   ;Line19
           .BYTE   $44,$44,$44,$44,$44,$44,$44,$44
           .BYTE   $CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC
           .BYTE   $22,$22,$22,$22,$22,$22,$22,$22
           .BYTE   $11,$11,$11,$11,$11,$11,$11,$11
           .BYTE   $11,$11,$11,$11,$11,$11,$11,$11
           .BYTE   $E1,$E1,$E1,$E1,$E1,$E1,$E1,$E1   ;Line4
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3
           .BYTE   $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
           .BYTE   $E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line12
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $92,$92,$92,$92,$92,$92,$92,$92   ;Line20
           .BYTE   $43,$43,$43,$43,$43,$43,$43,$43
           .BYTE   $C2,$C2,$C2,$C2,$C2,$C2,$C2,$C2
           .BYTE   $2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
           .BYTE   $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
                                                  
SCRNDAT7:  .BYTE   $E1,$E1,$E1,$E1,$E1,$E1,$E1,$E1   ;Line5
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3
           .BYTE   $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
           .BYTE   $E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2
           .BYTE   $EE,$EE,$EE,$EE,$EE,$EE,$EE,$EE   ;Line13
           .BYTE   $99,$99,$99,$99,$99,$99,$99,$99
           .BYTE   $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
           .BYTE   $33,$33,$33,$33,$33,$33,$33,$33
           .BYTE   $11,$11,$11,$11,$11,$11,$11,$11
           .BYTE   $92,$92,$92,$92,$92,$92,$92,$92   ;Line21
           .BYTE   $43,$43,$43,$43,$43,$43,$43,$43
           .BYTE   $C2,$C2,$C2,$C2,$C2,$C2,$C2,$C2
           .BYTE   $2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
           .BYTE   $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line6
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4   ;Line14
           .BYTE   $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $38,$38,$38,$38,$38,$38,$38,$38
           .BYTE   $14,$14,$14,$14,$14,$14,$14,$14
           .BYTE   $92,$92,$92,$92,$92,$92,$92,$92   ;Line22
           .BYTE   $43,$43,$43,$43,$43,$43,$43,$43
           .BYTE   $C2,$C2,$C2,$C2,$C2,$C2,$C2,$C2
           .BYTE   $2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
           .BYTE   $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
                                                  
SCRNDAT8:  .BYTE   $44,$44,$44,$44,$44,$44,$44,$44   ;Line7
           .BYTE   $33,$33,$33,$33,$33,$33,$33,$33
           .BYTE   $77,$77,$77,$77,$77,$77,$77,$77
           .BYTE   $66,$66,$66,$66,$66,$66,$66,$66
           .BYTE   $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
           .BYTE   $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4   ;Line15
           .BYTE   $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $38,$38,$38,$38,$38,$38,$38,$38
           .BYTE   $14,$14,$14,$14,$14,$14,$14,$14
           .BYTE   $92,$92,$92,$92,$92,$92,$92,$92   ;Line23
           .BYTE   $43,$43,$43,$43,$43,$43,$43,$43
           .BYTE   $C2,$C2,$C2,$C2,$C2,$C2,$C2,$C2
           .BYTE   $2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
           .BYTE   $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
           .BYTE   $66,$77,$77,$77,$77,$77,$77,$77
           .BYTE   $40,$40,$40,$40,$40,$40,$40,$40   ;Line8
           .BYTE   $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
           .BYTE   $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $6A,$6A,$6A,$6A,$6A,$6A,$6A,$6A
           .BYTE   $D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5
           .BYTE   $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4   ;Line16
           .BYTE   $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A
           .BYTE   $D2,$D2,$D2,$D2,$D2,$D2,$D2,$D2
           .BYTE   $38,$38,$38,$38,$38,$38,$38,$38
           .BYTE   $14,$14,$14,$14,$14,$14,$14,$14
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00   ;Line24
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
; 
; PARAMS FOR SOS GET_DEV_NUM CALL
DEVBLOCK:  .BYTE   $02           ;2 parameters
           .WORD   DEVNAME       ;pointer to dev name
CDEVNUM:   .BYTE   $00
           .ENDPROC
; 
; 
;----------------------------------------------------------------------
;         
           .PROC   HFRAME ; call with frame number 0..4 in A
; Update the character font data based on the frame number
; passed into the procedure
;

PTR       =    $E8

           ASL     A             ;x2
           TAY
           LDA     FRAMETAB,Y
           CLC
           ADC     FRAMEADR      ;add lsb of base address of frame data
           STA     PTR
           LDA     FRAMETAB+1,Y
           ADC     FRAMEADR+1    ;add msb of base address of frame data
           STA     PTR+1
           LDA     #$00          ;disable extended addressing
           STA     $1601+PTR
           LDY     #$00
           LDA     (PTR),Y
           STA     CHRINFRM      ;number of characters in this frame
           JSR     INCPTR        ;increment pointer
NEXTLOT:   LDA     #$00
           STA     NUMCHARS
NEXTCHAR:  JSR     COPYDATA      ;copy font data for this character
           DEC     CHRINFRM      ;decrement count for chars in frame
           BMI     DONE          ;branch if we are done all
           INC     NUMCHARS
           LDA     NUMCHARS
           CMP     #$08
           BCC     NEXTCHAR
           JSR     LOADCHRS      ;load eight characters
           JMP     NEXTLOT       ;do remaining characters

DONE:      JMP     LOADCHRS      ;load characters and return
;
; increment pointer
;
INCPTR:    INC     PTR
           BNE     MSBOK
           INC     PTR+1
MSBOK:     RTS
;
; Load character font data using .CONSOLE
;
LOADCHRS:  LDA     NUMCHARS      ;number of chars to load
           STA     CTRLLIST      ;store in sos call param list
           SOS DCONTROL,DEVBLK2  ;partial character load
           RTS

COPYDATA:  LDY     NUMCHARS
           LDX     CHARTAB,Y
           LDA     #$09          ;8 ROWS (COUNT + ONE)
           STA     ROW
           LDY     #$00
NEXTROW:   LDA     (PTR),Y
           STA     CTRLLIST,X
           INX
           JSR     INCPTR        ;Increment pointer
           DEC     ROW
           BNE     NEXTROW
           RTS
;
; Offset into console character loading table
;
CHARTAB:   .BYTE   $01
           .BYTE   $0A
           .BYTE   $13
           .BYTE   $1C
           .BYTE   $25
           .BYTE   $2E
           .BYTE   $37
           .BYTE   $40
           .BYTE   $49
; 
; Frames
; 
FRAMES:    .BYTE   $05           ;Number of frames?
; 
; Offset for each frame start
; 
FRAMETAB:  .WORD   $000B         ;Offset into char data
           .WORD   $012C
           .WORD   $01EA
           .WORD   $02A8
           .WORD   $0366
;
; Frame Font data
; each frame has:
; - number of characters in the frame
; - char code + 8 rows(bytes) of data x num chars
;
; only updates the changed chars in each frame 
;
; FRAME 0
           .BYTE   32
           .BYTE   $00,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $01,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $02,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $03,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $04,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$1F
           .BYTE   $05,$7F,$7F,$1F,$67,$17,$09,$00,$62
           .BYTE   $06,$7F,$73,$72,$44,$00,$62,$43,$03
           .BYTE   $07,$7F,$7F,$7F,$7F,$7F,$7E,$7B,$77
           .BYTE   $08,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $09,$7F,$7F,$3F,$0F,$47,$5F,$7F,$7F
           .BYTE   $0A,$7F,$7F,$00,$05,$1C,$5E,$5F,$1F
           .BYTE   $0B,$7F,$00,$1F,$7F,$1E,$1C,$18,$30
           .BYTE   $0C,$7F,$00,$60,$7F,$7F,$78,$02,$00
           .BYTE   $0D,$70,$38,$1F,$7F,$7F,$7F,$3F,$1C
           .BYTE   $0E,$11,$78,$78,$79,$7D,$7D,$7C,$7E
           .BYTE   $0F,$73,$7C,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $10,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $11,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $12,$3F,$03,$03,$73,$73,$33,$73,$78
           .BYTE   $13,$11,$42,$60,$71,$70,$78,$78,$71
           .BYTE   $14,$10,$21,$0F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $15,$00,$00,$60,$03,$03,$67,$67,$67
           .BYTE   $16,$7C,$70,$71,$78,$7C,$7F,$7F,$7F
           .BYTE   $17,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $18,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $19,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1A,$7C,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1B,$63,$47,$1F,$1F,$00,$7F,$7F,$7F
           .BYTE   $1C,$7F,$7F,$7F,$7E,$00,$7F,$7F,$7F
           .BYTE   $1D,$47,$07,$3F,$3F,$00,$7F,$7F,$7F
           .BYTE   $1E,$7F,$7F,$7E,$7C,$00,$7F,$7F,$7F
           .BYTE   $1F,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
; FRAME 1
           .BYTE   21
           .BYTE   $04,$7F,$7F,$7F,$7F,$7F,$3F,$5F,$07
           .BYTE   $05,$7F,$7F,$4F,$2B,$1D,$04,$42,$20
           .BYTE   $06,$7B,$73,$70,$68,$58,$70,$00,$44
           .BYTE   $07,$7F,$7F,$7F,$7F,$7F,$7E,$79,$79
           .BYTE   $09,$7F,$3F,$1F,$0F,$47,$7F,$7F,$7F
           .BYTE   $0A,$3F,$00,$68,$2C,$0E,$0F,$1F,$1F
           .BYTE   $0B,$00,$6F,$6F,$24,$00,$00,$00,$00
           .BYTE   $0C,$78,$7F,$7F,$7E,$38,$00,$10,$00
           .BYTE   $0D,$27,$3F,$7F,$7D,$7C,$3C,$0E,$7E
           .BYTE   $0E,$1C,$7E,$7E,$7E,$7E,$7E,$7E,$78
           .BYTE   $0F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $12,$1F,$07,$07,$47,$11,$19,$39,$09
           .BYTE   $13,$38,$7E,$7F,$7F,$7F,$7F,$7E,$7F
           .BYTE   $14,$00,$3F,$1F,$1F,$0F,$4F,$67,$67
           .BYTE   $15,$00,$68,$7C,$3F,$3F,$7F,$7F,$7F
           .BYTE   $16,$70,$73,$79,$7C,$7E,$7F,$7F,$7F
           .BYTE   $1A,$49,$79,$73,$63,$00,$7F,$7F,$7F
           .BYTE   $1B,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1C,$73,$73,$67,$47,$00,$7F,$7F,$7F
           .BYTE   $1D,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1E,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
; FRAME 2
           .BYTE   21
           .BYTE   $04,$7F,$7F,$7F,$7F,$7F,$7F,$1F,$3F
           .BYTE   $05,$7F,$7F,$7F,$3F,$07,$4F,$10,$01
           .BYTE   $06,$7F,$7B,$73,$68,$41,$20,$60,$41
           .BYTE   $07,$7F,$7F,$7F,$7F,$7F,$7F,$7E,$7B
           .BYTE   $09,$7F,$7F,$3F,$0F,$03,$2F,$7F,$7F
           .BYTE   $0A,$7F,$7F,$00,$58,$1E,$0F,$0F,$0F
           .BYTE   $0B,$7F,$00,$1F,$4F,$07,$0C,$00,$08
           .BYTE   $0C,$07,$70,$7F,$7F,$1E,$0F,$00,$00
           .BYTE   $0D,$40,$07,$3F,$7F,$3E,$38,$30,$18
           .BYTE   $0E,$18,$3C,$7D,$7E,$7E,$7F,$7F,$7E
           .BYTE   $0F,$79,$7E,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $11,$7F,$7F,$7F,$7F,$7F,$3F,$1F,$4F
           .BYTE   $12,$0F,$07,$43,$61,$78,$7E,$7F,$7F
           .BYTE   $13,$60,$61,$71,$78,$7C,$79,$67,$4F
           .BYTE   $14,$07,$7F,$7F,$7F,$7F,$3F,$0F,$61
           .BYTE   $15,$78,$01,$71,$78,$7C,$7E,$7F,$7F
           .BYTE   $16,$61,$40,$4F,$4F,$4F,$4F,$67,$67
           .BYTE   $19,$67,$67,$63,$67,$00,$7F,$7F,$7F
           .BYTE   $1A,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1B,$0F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1C,$7C,$7F,$7F,$7F,$00,$7F,$7F,$7F
; FRAME 3
           .BYTE   21
           .BYTE   $04,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $05,$7F,$7F,$7F,$7F,$7F,$1F,$47,$17
           .BYTE   $06,$7F,$7F,$73,$67,$70,$4B,$70,$60
           .BYTE   $09,$7F,$7F,$7F,$3F,$5F,$7F,$7F,$7F
           .BYTE   $0A,$7F,$7F,$00,$30,$3A,$3F,$3F,$3F
           .BYTE   $0B,$7F,$01,$0C,$3E,$42,$18,$4C,$32
           .BYTE   $0C,$7F,$3C,$40,$7F,$70,$60,$40,$00
           .BYTE   $0D,$02,$04,$1F,$7F,$79,$71,$58,$18
           .BYTE   $0E,$00,$10,$74,$70,$79,$7B,$7B,$78
           .BYTE   $0F,$70,$73,$7E,$7F,$7F,$7F,$7F,$7F
           .BYTE   $11,$7F,$7F,$7F,$7F,$7F,$7F,$3F,$11
           .BYTE   $12,$3F,$1F,$07,$41,$71,$7C,$7E,$7F
           .BYTE   $13,$08,$00,$0C,$1F,$1F,$0F,$1F,$7F
           .BYTE   $14,$00,$1F,$7F,$7F,$7F,$0F,$1E,$7C
           .BYTE   $15,$40,$00,$07,$47,$4F,$4F,$40,$7F
           .BYTE   $16,$7B,$66,$40,$03,$1F,$3F,$7F,$7F
           .BYTE   $17,$7F,$7F,$7F,$7F,$7F,$7E,$7C,$79
           .BYTE   $19,$43,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1B,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1C,$73,$67,$67,$7F,$00,$7F,$7F,$7F
           .BYTE   $1F,$79,$7F,$7F,$7F,$00,$7F,$7F,$7F
; FRAME 4
           .BYTE   25
           .BYTE   $05,$7F,$7F,$1F,$67,$17,$09,$00,$62
           .BYTE   $06,$7F,$73,$72,$44,$00,$62,$43,$03
           .BYTE   $07,$7F,$7F,$7F,$7F,$7F,$7E,$7B,$77
           .BYTE   $09,$7F,$7F,$3F,$0F,$47,$5F,$7F,$7F
           .BYTE   $0A,$7F,$7F,$00,$05,$1C,$5E,$5F,$1F
           .BYTE   $0B,$7F,$00,$1F,$7F,$1E,$1C,$18,$30
           .BYTE   $0C,$7F,$00,$60,$7F,$7F,$78,$02,$00
           .BYTE   $0D,$70,$38,$1F,$7F,$7F,$7F,$3F,$1C
           .BYTE   $0E,$11,$78,$78,$79,$7D,$7D,$7C,$7E
           .BYTE   $0F,$73,$7C,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $11,$7F,$7F,$7F,$7F,$7F,$7F,$7E,$7B
           .BYTE   $12,$3F,$03,$03,$73,$73,$33,$73,$78
           .BYTE   $13,$11,$42,$60,$71,$70,$78,$78,$71
           .BYTE   $14,$10,$21,$0F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $15,$00,$00,$60,$03,$03,$67,$67,$67
           .BYTE   $16,$7C,$70,$71,$78,$7C,$7F,$7F,$7F
           .BYTE   $17,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
           .BYTE   $18,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $19,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1A,$7C,$7F,$7F,$7F,$00,$7F,$7F,$7F
           .BYTE   $1B,$63,$47,$1F,$1F,$00,$7F,$7F,$7F
           .BYTE   $1C,$7F,$7F,$7F,$7E,$00,$7F,$7F,$7F
           .BYTE   $1D,$47,$07,$3F,$3F,$00,$7F,$7F,$7F
           .BYTE   $1E,$7F,$7F,$7E,$7C,$00,$7F,$7F,$7F
           .BYTE   $1F,$7F,$7F,$7F,$7F,$00,$7F,$7F,$7F
; 
FRAMEADR:  .WORD   FRAMES        ;Address for start of frame data
ROW:       .BYTE   $00           ;current text screen row
NUMCHARS:  .BYTE   $00           ;number of characters to load
CHRINFRM:  .BYTE   $00           ;number of characters in frame
           .ENDPROC
;
; sos dev control call params
;
DEVBLK2:   .BYTE   $03           ;3 params
WDEVNUM:   .BYTE   $00           ;devnum
           .BYTE   $11           ;partial char load
           .WORD   CTRLLIST      ;pointer to control list
;
; 
; 
CTRLLIST:  .BYTE   $00           ;number of characters to load
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00 ;chr code + 8 row bytes
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00
           .BYTE   $00,$00,$00,$00,$00,$00,$00,$00,$00

;
; 
;----------------------------------------------------------------------
;         
           .PROC   HSCROLL
;         
; scroll text screen right one character
; with wrap around
;
LINECNT   =    $EA
LINEPTR   =    $EC

           LDA     #$00
           STA     LINECNT       ;number of lines
NXTLINE:   LDA     LINECNT
           JSR     CALCADR       ;setup up line pointer
           LDY     #39           ;number of characters
           LDA     (LINEPTR),Y   ;current char in column 39
           PHA                   ;and save
NXTCHAR:   DEY                   ;get character to the left one pos
           LDA     (LINEPTR),Y
           INY                   ;and move one char to the right
           STA     (LINEPTR),Y
           DEY
           BNE     NXTCHAR       ;repeat until we are at column 0
           PLA                   ;then get the saved char
           STA     (LINEPTR),Y   ;and store in column 0
           INC     LINECNT       ;inc line counter
           LDA     LINECNT
           CMP     #24           ;24 Lines
           BCC     NXTLINE
           RTS
;
; calculate line pointer
; - input A = current line
; - output EC/ED = address of start of line
;
CALCADR:   PHA                   ;save line number
           LSR     A             ;calculate line address high byte
           AND     #$03
           ORA     #$04
           STA     LINEPTR+1
           PLA                   ;restore line number
           AND     #$18          ;calculate line address low byte
           BCC     ALTERN
           ADC     #$7F
ALTERN:    STA     LINEPTR
           ASL     A
           ASL     A
           ORA     LINEPTR
           STA     LINEPTR
           RTS
         
          .ENDPROC
;*****************************************************************

;*****************************************************************
;
;        End of program -- calculate length
;
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

CODELEN =       *-CODESTART     ; Calculate number of bytes in
        .ENDPROC                ;    program

;*****************************************************************

